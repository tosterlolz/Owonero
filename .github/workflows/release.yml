name: Release artifacts

on:
  push:
    tags:
      - 'v*'

jobs:
  build-matrix:
    name: Build release artifacts on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install pkg-config openssl || true

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: choco install -y openssl.light || echo 'choco install skipped'

      - name: Build release
        run: cargo build --release

      - name: Package binary
        run: |
          mkdir -p release-artifacts
          if [ "${{ runner.os }}" = "Windows" ] || [ "${{ runner.os }}" = "Windows Server 2019" ]; then
            cp target/release/owonero-rs.exe release-artifacts/owonero-${{ github.ref_name }}-windows-x86_64.exe || true
          else
            cp target/release/owonero-rs release-artifacts/owonero-${{ github.ref_name }}-${{ matrix.os }} || true
          fi
        shell: bash

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: owonero-${{ matrix.os }}-${{ github.ref_name }}
          path: release-artifacts

  publish:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build-matrix
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files
        run: |
          ls -R .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: Automated release for ${{ github.ref_name }}

      - name: Upload release artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}
          echo "Uploading artifacts to $UPLOAD_URL"
          for f in $(find . -type f -path './release-artifacts/*' -print); do
            filename=$(basename "$f")
            echo "Uploading $filename"
            curl -sSL -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/octet-stream" --data-binary @"$f" "$UPLOAD_URL?name=$filename"
          done
        shell: bash
